{"tagline":"A recommendation engine that care about user actions","body":"\r\nnode-fussy\r\n==========\r\n\r\n*A recommendation engine that care about user actions*\r\n\r\n## Presentation\r\n\r\nFussy is a minimalist recommendation engine. It filters unwanted noise out of your news streams, but not too much: fussy will watch carefully and try to suggest things from time to time.\r\nIf you change your mind later, fussy will detect it, and adjust your profile a.k.a \"filter bubble\",\r\nso that it is not a bubble anymore.\r\n\r\nIt's sounds like magic, but you can trust fussy. Because you know, he is very picky.\r\n\r\n## How it works\r\n\r\nIt's based on a basic, naive-bayesian style algorithm:\r\nEverytime you call profile.learn() this will increment or decrement some weights in the underlying network of tags.\r\nThat's why Fussy can fix profiles back: you can decrement the importance of keywords dynamically, hours, days or months after liking them.\r\n\r\n## Installation\r\n\r\n    $ npm install fussy\r\n\r\n## Demo\r\n\r\n```CoffeeScript\r\n{Database, Profile} = require 'fussy'\r\ndatabase = new Database()\r\ndatabase.learn\r\n  \"Twitter to sue Google over twitter stream monetization\": [\"Technology\", \"Twitter\", \"Google\", \"Internet\"]\r\n  \"A new library open in the east center in NYC\": [\"city\",\"library\",\"nyc\"]\r\n  \"Rumors: Apple to launch a new tablet for emerging markets\": [\"Technology\", \"Apple\", \"Rumor\"]\r\n  \"Microsoft reveal its new data center\": [\"Technology\", \"Rumor\", \"Microsoft\"]\r\n  \"An energy-friendly data center for emerging countries\": [\"Technology\", \"World\", \"Energy\"]\r\n  \"History of the countries: world music festival at the museum\": [\"Music\", \"City\",\"Culture\"]\r\n  \"Visiting a museum is good for health\": [\"Health\", \"Culture\"]\r\n  \"Using home brew to install appplications on your Apple macbook\": [\"Computers\", \"Software\", \"Apple\"]\r\n  \"How to brew your own beer\": [\"DIY\", \"Fooding\", \"Beverages\", \"Beer\"]\r\n  \"Facebook to reveal a new open source library\": [\"Opensource\",\"Technology\",\"Facebook\",\"Social Networks\"]\r\n\r\nprofile = new Profile()\r\n\r\n# news to ask the user for like/dislike\r\ntraining = database.tag [\r\n  \"Visit the NYC museum using your tablet\"\r\n  \"How to brew your own coffee\"\r\n  \"Google to launch a new museum app\"\r\n  \"Apple to sue Microsoft\"\r\n]\r\n\r\nfor txt, keywords of training\r\n\r\n  # +1: like, 0: indifference, -1: dislike \r\n  choice = 1\r\n\r\n  profile.learn txt, keywords, choice\r\n\r\n# news to sort / rate\r\nnews = database.tag [\r\n  \"Open source conference give free beer to first 50 people in NY\"\r\n  \"What is in people's head? an in-depth data analysis\"\r\n]\r\nrecommendations = profile.recommend news\r\nconsole.log \"--> #{Object.keys recommendations}\"\r\n```\r\n\r\n## Documentation\r\n\r\n### Automatic text tagging\r\n\r\nFussy has a built-in text tagger. \r\n\r\n#### Learning tags\r\n\r\nFussy need to learn tags from an existing dataset: \r\n\r\n```CoffeeScript\r\nfussy = require 'fussy'\r\ndatabase = new fussy.Database()\r\ndatabase.learn\r\n  \"a short test text\": [\"keyword one\", \"keyword two\"]\r\n  \"a second text\": [\"keyword one\", \"a new keyword\"]\r\n```\r\n\r\n#### Tagging words\r\n\r\nThen you can use it to tag text:\r\n\r\n```CoffeeScript\r\ntagged = database.tag [\r\n  \" a second test\"\r\n]\r\n```\r\n\r\n#### Saving memory\r\n\r\nFussy is a memory hog: since it keeps everything in RAM\r\n(every single ngram he encounters) you will have to\r\nclean weaks connections by calling database.prune(threshold)\r\n\r\nconnections with a weight <= threshold will be removed,\r\nsaving memory.\r\n\r\nTypically you will want to do this:\r\n\r\n```CoffeeScript\r\n# we need to regularly prune the database or else memory will explode  \r\ndo prune = ->\r\n  # database.size is the number of connections in the underlying network\r\n  console.log \"database size: #{database.size} entries\"\r\n  if database.size > 500000 # for instance\r\n    console.log \"pruning..\"\r\n    pruned = database.prune 1\r\n    console.log \"pruned #{pruned.keywords} keywords and #{pruned.ngrams} ngrams\\n\"\r\n    setTimeout prune, 1000\r\n  else\r\n    console.log \"no need to prune.\"\r\n    setTimeout prune, 5000\r\n```\r\n\r\n### User recommendation\r\n\r\n\r\n#### Creating a new Profile\r\n\r\n```CoffeeScript\r\nprofile = new Profile()\r\n```\r\n\r\n#### Learning from a user preference\r\n\r\nWe need to save the full text together with the keywords.\r\nThe keywords can be hidden for the end user (he can only see the text if you want),\r\nbut you have to keep in mind that internally Fussy need them \r\nto compute its scores.\r\n\r\n```CoffeeScript\r\nprofile.learn \"there is snow at the train station\", [\"weather\",\"city\",\"snow\",\"winter\"], +1\r\nprofile.learn \"it is too hot in the city hall\",     [\"weather\",\"city\",\"summer\",\"hot\"],  -1\r\n```\r\n\r\n#### Recommending a text\r\n\r\n```CoffeeScript\r\ntagged = database.tag [\r\n  \"a brand new movie synopsis with a cool scenario\"\r\n  \"a new movie about teletubbies\"\r\n  \"martians have been discovered on Mercury! but they are dead\"\r\n]\r\nrecommended = profile.recommend tagged\r\n```\r\n\r\n\r\nTo be continued, see the example\r\n\r\n## Examples\r\n\r\n  See the /examples folder.\r\n\r\n  There is an example crawler.coffee (careful: it needs a few dependencies, but they are on NPM) that show how one could use Twitter to get a \"randomly\" tagged dataset for free.\r\n\r\n## Wishlist\r\n\r\n * unit tests\r\n\r\n## Changelog\r\n\r\n#### 0.0.1 (Wednesday, December 5, 2012)\r\n\r\n * Added database.size\r\n * Added database.prune(threshold)\r\n * Added database.toFile(fileName)\r\n * Removed the toy twitter database from core\r\n * Added an example crawler you could use to build a tag database\r\n\r\n#### 0.0.0\r\n\r\n * Initial version, not very documented\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Node Fussy"}