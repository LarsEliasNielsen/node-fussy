// Generated by CoffeeScript 1.4.0
(function() {
  var createDatabaseFromDataset, database, enrichData, enrichedData, inspect, keywords, ngramize, pretty, rawData, trainingDataset, txt, userFeedback;

  inspect = require('util').inspect;

  pretty = function(obj) {
    return "" + (inspect(obj, false, 20, true));
  };

  trainingDataset = {
    "Twitter to sue Google over twitter stream monetization": ["Technology", "Twitter", "Google", "Internet"],
    "A new library open in the east center": ["city", "library", "nyc"],
    "Rumors: Apple to launch a new tablet for emerging markets": ["Technology", "Apple", "Rumor"],
    "Microsoft reveal its new data center": ["Technology", "Rumor", "Microsoft"],
    "An energy-friendly data center for emerging countries": ["Technology", "World", "Energy"],
    "History of the countries: world music festival at the museum": ["Music", "City", "Culture"],
    "Visiting a museum is good for health": ["Health", "Culture"],
    "Using home brew to install appplications on your Apple macbook": ["Computers", "Software", "Apple"],
    "How to brew your own beer": ["DIY", "Fooding", "Beverages", "Beer"],
    "Facebook to reveal a new open source library": ["Opensource", "Technology", "Facebook", "Social Networks"],
    "Open source conference give free beer to first 50 people": ["Opensource", "Beer", "Conference"],
    "What is in people's head? an in-depth data analysis": ["Psychology"]
  };

  ngramize = function(words, n) {
    var gram, grams, i, k, subgrams, v, w, _i, _j, _len, _ref;
    if (!Array.isArray(words)) {
      words = words.split(' ');
    }
    grams = {};
    if (n < 2) {
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        w = words[_i];
        grams["" + w] = Array.isArray(w) ? w : [w];
      }
      return grams;
    }
    for (i = _j = 0, _ref = words.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      gram = words.slice(i, i + n);
      subgrams = ngramize(gram, n - 1);
      for (k in subgrams) {
        v = subgrams[k];
        grams[k] = v;
      }
      if (i > words.length - n) {
        break;
      }
      grams["" + gram] = gram;
    }
    return grams;
  };

  createDatabaseFromDataset = function(set, size) {
    var db, key, keywords, n, ngram, txt, _i, _len, _ref;
    if (size == null) {
      size = 3;
    }
    db = {};
    for (txt in set) {
      keywords = set[txt];
      _ref = ngramize(txt, size);
      for (n in _ref) {
        ngram = _ref[n];
        if (!(n in db)) {
          db[n] = {
            ngram: ngram,
            keywords: {}
          };
        }
        for (_i = 0, _len = keywords.length; _i < _len; _i++) {
          key = keywords[_i];
          if (!(key in db[n].keywords)) {
            db[n].keywords[key] = 0;
          }
          db[n].keywords[key] += 1;
        }
      }
    }
    return db;
  };

  enrichData = function(db, raw) {
    var enriched, getAllKeywords, guessTopKeywords, title, top, _i, _len;
    getAllKeywords = function(db, txt) {
      var grams, keyword, keywords, ngramArray, ngramString, value, _ref;
      grams = ngramize(title, 3);
      keywords = {};
      for (ngramString in grams) {
        ngramArray = grams[ngramString];
        if (ngramString in db) {
          _ref = db[ngramString].keywords;
          for (keyword in _ref) {
            value = _ref[keyword];
            if (!(keyword in keywords)) {
              keywords[keyword] = 0;
            }
            keywords[keyword] += value;
          }
        }
      }
      return keywords;
    };
    guessTopKeywords = function(db, txt) {
      var keyword, keywords, top, weight;
      keywords = getAllKeywords(db, txt);
      top = [];
      for (keyword in keywords) {
        weight = keywords[keyword];
        if (weight < 3) {
          continue;
        }
        if (top.length > 2) {
          break;
        }
        top.push(keyword);
      }
      return top;
    };
    enriched = {};
    for (_i = 0, _len = raw.length; _i < _len; _i++) {
      title = raw[_i];
      top = guessTopKeywords(db, title);
      console.log("top: " + pretty(top));
      enriched["" + title] = top;
    }
    return enriched;
  };

  userFeedback = function(txt, keywords, feedback) {
    var choice;
    console.log(" --> Show to user: " + (pretty(txt)) + " (" + (pretty(keywords.join(', '))) + ") (MORE) (LESS)");
    choice = Math.round(Math.random() * 2 - 1);
    return feedback(txt, keywords, choice);
  };

  rawData = ["Visit the museum using your tablet", "How to brew your own coffee", "Google to launch a new museum app", "Apple to sue Microsoft"];

  database = createDatabaseFromDataset(trainingDataset);

  console.log(pretty(database));

  enrichedData = enrichData(database, rawData);

  console.log("enriched data: " + pretty(enrichedData));

  for (txt in enrichedData) {
    keywords = enrichedData[txt];
    userFeedback(txt, keywords, function(txt, keywords, choice) {
      var choices;
      choices = {
        '1': 'more',
        '-1': 'less',
        '0': 'ignore'
      };
      console.log(" <-- user choose: " + choices[choice.toString()]);
      if (choice === 0) {
        console.log("do nothing for " + pretty(txt));
      }
    });
  }

}).call(this);
