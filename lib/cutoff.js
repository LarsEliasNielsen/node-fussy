// Generated by CoffeeScript 1.4.0
(function() {
  var database, enrichData, enrichedData, feed, inspect, keyword, keywords, ngramArray, ngramString, ngramize, pretty, rawData, title, trainingDataset, userFeedback, _i, _j, _len, _len1, _ref;

  inspect = require('util').inspect;

  pretty = function(obj) {
    return "" + (inspect(obj, false, 20, true));
  };

  trainingDataset = {
    "Twitter to sue Google over twitter stream monetization": ["Technology", "Twitter", "Google", "Internet"],
    "A new library open in the east center": ["city", "library", "nyc"],
    "Rumors: Apple to launch a new tablet for emerging markets": ["Technology", "Apple", "Rumor"],
    "Microsoft reveal its new data center": ["Technology", "Rumor", "Microsoft"],
    "An energy-friendly data center for emerging countries": ["Technology", "World", "Energy"],
    "History of the countries: world music festival at the museum": ["Music", "City", "Culture"],
    "Visiting a museum is good for health": ["Health", "Culture"],
    "Using home brew to install appplications on your Apple macbook": ["Computers", "Software", "Apple"],
    "How to brew your own beer": ["DIY", "Fooding", "Beverages", "Beer"],
    "Facebook to reveal a new open source library": ["Opensource", "Technology", "Facebook", "Social Networks"],
    "Open source conference give free beer to first 50 people": ["Opensource", "Beer", "Conference"],
    "What is in people's head? an in-deep data analysis": ["Psychology"]
  };

  ngramize = function(words, n) {
    var gram, grams, i, k, subgrams, v, w, _i, _j, _len, _ref;
    if (!Array.isArray(words)) {
      words = words.split(' ');
    }
    grams = {};
    if (n < 2) {
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        w = words[_i];
        grams["" + w] = Array.isArray(w) ? w : [w];
      }
      return grams;
    }
    for (i = _j = 0, _ref = words.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
      gram = words.slice(i, i + n);
      subgrams = ngramize(gram, n - 1);
      for (k in subgrams) {
        v = subgrams[k];
        grams[k] = v;
      }
      if (i > words.length - n) {
        break;
      }
      grams["" + gram] = gram;
    }
    return grams;
  };

  database = {};

  for (title in trainingDataset) {
    keywords = trainingDataset[title];
    _ref = ngramize(title, 3);
    for (ngramString in _ref) {
      ngramArray = _ref[ngramString];
      if (!(ngramString in database)) {
        database[ngramString] = {
          ngram: ngramArray,
          keywords: {}
        };
      }
      for (_i = 0, _len = keywords.length; _i < _len; _i++) {
        keyword = keywords[_i];
        if (!(keyword in database[ngramString].keywords)) {
          database[ngramString].keywords[keyword] = 0;
        }
        database[ngramString].keywords[keyword] += 1;
      }
    }
  }

  console.log(pretty(database));

  enrichData = function(raw) {
    var enriched, getAllKeywords, guessTopKeywords, top, _j, _len1;
    getAllKeywords = function(txt) {
      var grams, value, _ref1;
      grams = ngramize(title, 3);
      keywords = {};
      for (ngramString in grams) {
        ngramArray = grams[ngramString];
        if (ngramString in database) {
          _ref1 = database[ngramString].keywords;
          for (keyword in _ref1) {
            value = _ref1[keyword];
            if (!(keyword in keywords)) {
              keywords[keyword] = 0;
            }
            keywords[keyword] += value;
          }
        }
      }
      return keywords;
    };
    guessTopKeywords = function(txt) {
      var top, weight;
      keywords = getAllKeywords(txt);
      top = [];
      for (keyword in keywords) {
        weight = keywords[keyword];
        if (weight < 3) {
          continue;
        }
        if (top.length > 2) {
          break;
        }
        top.push(keyword);
      }
      return top;
    };
    enriched = {};
    for (_j = 0, _len1 = raw.length; _j < _len1; _j++) {
      title = raw[_j];
      top = guessTopKeywords(title);
      console.log("top: " + pretty(top));
      enriched["" + title] = top;
    }
    return enriched;
  };

  userFeedback = function(feed, feedback) {
    var choice;
    choice = 1;
    return feedback(feed, choice);
  };

  rawData = ["Visit the museum using your tablet", "How to brew your own coffee", "Google to launch a new museum app", "Apple to sue Microsoft"];

  enrichedData = enrichData(rawData);

  console.log("enriched data: " + pretty(enrichedData));

  for (_j = 0, _len1 = feeds.length; _j < _len1; _j++) {
    feed = feeds[_j];
    console.log("waiting for user feedback on " + pretty(feed));
    userFeedback(feed, function(feed, choice) {
      if (choice === 0) {
        console.log("do nothing for feed " + pretty(feed));
        return;
      }
      keywords = guessTopKeywords(feed);
      return console.log("feed keywords: " + pretty(keywords));
    });
  }

}).call(this);
